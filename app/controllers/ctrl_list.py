"""
app/controllers/ctrl_list.py

R√¥le fonctionnel: Contr√¥leur m√©tier pour les listes

Description: Ce fichier contient la logique m√©tier pour les op√©rations CRUD sur les listes,
sans aucune r√©f√©rence aux routes HTTP ou au routage. Il sert de couche interm√©diaire entre
le routeur et les mod√®les.

Donn√©es attendues: 
- Param√®tres directs ou dictionnaires de donn√©es
- Format des donn√©es d√©fini dans le dictionnaire de donn√©es:
  - name: String(50), requis
  - color_code: String(7), optionnel, format HEX (#RRGGBB)

Donn√©es produites:
- Objets m√©tier, tuples (succ√®s/√©chec, donn√©es/message) ou dictionnaires
- Aucun objet de r√©ponse HTTP (pas de jsonify, render_template, etc.)

Contraintes:
- Les noms de liste doivent √™tre uniques
- La suppression d'une liste entra√Æne la suppression en cascade des sous-listes 
  et activit√©s associ√©es
"""

from app import db
from app.models.list import List
from app.models.sublist import Sublist
from app.models.activity import Activity

def get_all_lists():
    """
    R√©cup√®re toutes les listes ordonn√©es par nom.
    
    Returns:
        list: Liste des objets List tri√©s par nom
    """
    return List.query.order_by(List.name).all()

def get_list(id):
    """
    R√©cup√®re une liste par son ID.
    
    Args:
        id (int): Identifiant unique de la liste √† r√©cup√©rer
    
    Returns:
        tuple: (succ√®s, donn√©es/message)
            - Si succ√®s: (True, objet List)
            - Si √©chec: (False, message d'erreur)
    """
    list_obj = db.session.get(List, id)
    if not list_obj:
        return False, "Liste non trouv√©e"
    return True, list_obj

def create_list(data):
    """
    Cr√©e une nouvelle liste.
    
    Args:
        data (dict): Dictionnaire contenant les donn√©es de la liste
            - name: Nom de la liste (requis, unique)
            - color_code: Code couleur HEX (optionnel, ex: "#3C91E6")
    
    Returns:
        tuple: (succ√®s, donn√©es/message)
            - Si succ√®s: (True, objet List cr√©√©)
            - Si √©chec: (False, message d'erreur)
    """
    # Validation des donn√©es requises
    if 'name' not in data:
        return False, "Le nom de la liste est requis"
    
    # V√©rification que le nom n'existe pas d√©j√†
    if List.query.filter_by(name=data['name']).first():
        return False, "Une l[48;38;116;1520;2320tiste avec ce nom existe d√©j√†"
    
    # Cr√©ation de la liste
    list_obj = List(
        name=data['name'],
        color_code=data.get('color_code')
    )
    
    db.session.add(list_obj)
    db.session.commit()
    
    return True, list_obj

def update_list(id, data):
    """
    Met √† jour une liste existante.
    
    Args:
        id (int): Identifiant unique de la liste √† mettre √† jour
        data (dict): Donn√©es √† mettre √† jour
            - name: Nouveau nom de la liste (requis, unique)
            - color_code: Nouveau code couleur HEX (optionnel)
    
    Returns:
        tuple: (succ√®s, donn√©es/message)
            - Si succ√®s: (True, objet List mis √† jour)
            - Si √©chec: (False, message d'erreur)
    """
    list_obj = db.session.get(List, id)
    if not list_obj:
        return False, "Liste non trouv√©e"
        
    # Validation des donn√©es requises
    if 'name' not in data:
        return False, "Le nom de la liste est requis"
    
    # V√©rification que le nouveau nom n'existe pas d√©j√† (sauf s'il s'agit du m√™me)
    existing_list = List.query.filter_by(name=data['name']).first()
    if existing_list and existing_list.id != id:
        return False, "Une liste avec ce nom existe d√©j√†"
    
    # Mise √† jour des champs
    list_obj.name = data['name']
    if 'color_code' in data:
        list_obj.color_code = data['color_code']
    
    db.session.commit()
    
    return True, list_obj

def delete_list(id):
    """
    Supprime une liste et toutes les sous-listes et activit√©s associ√©es.
    
    Args:
        id (int): Identifiant unique de la liste √† supprimer
    
    Returns:
        tuple: (succ√®s, message)
            - Si succ√®s: (True, message de confirmation)
            - Si √©chec: (False, message d'erreur)
    """
    list_obj = db.session.get(List, id)
    if not list_obj:
        return False, "Liste non trouv√©e"
    
    # R√©cup√©rer le nom pour le message de confirmation
    list_name = list_obj.name
    
    # Suppression de la liste (les sous-listes et activit√©s seront supprim√©es en cascade)
    db.session.delete(list_obj)
    db.session.commit()
    
    return True, f"Liste '{list_name}' supprim√©e avec succ√®s"

def get_list_with_content(list_id):
    """
    R√©cup√®re une liste avec ses sous-listes et activit√©s.
    
    Args:
        id (int): Identifiant unique de la liste
    
    Returns:
        tuple: (succ√®s, donn√©es/message)
            - Si succ√®s: (True, dict contenant la liste, ses sous-listes et activit√©s)
            - Si √©chec: (False, message d'erreur)
    """
    list_obj = db.session.get(List, list_id)
    if not list_obj:
        return False, "Liste non trouv√©e"
    
    # R√©cup√©rer les sous-listes et activit√©s associ√©es
    sublists = Sublist.get_by_list_id(list_id)
    activities = Activity.get_by_list_id(list_id)
    
    return True, {
        "list": list_obj,
        "sublists": sublists,
        "activities": activities
    }
